     1                                  section .text
     2                                  
     3                                  global _start
     4                                  ;--------------------------------------------------------
     5                                  ;desplay string from the stack on cmd
     6                                  ;input: rdx - number of pushed chars
     7                                  
     8                                  ;destr: rax, rdi, rdx, rsi
     9                                  ;--------------------------------------------------------
    10                                  %macro  PUTSTRINGFROMSTACK 0
    11                                  nop
    12                                  
    13                                  		shl rdx, 3
    14                                  		mov rax, 0x01      
    15                                  		mov rdi, 1         ; stdout
    16                                  		mov rsi, rsp		;указатель на стэк
    17                                  		syscall
    18                                  		add rsp, rdx
    19                                  
    20                                  nop
    21                                  %endmacro
    22                                  ;---------------------------------------------------------
    23                                  
    24                                  ;---------------------------------------------------------
    25                                  ;выводит числа в 2кратных системах
    26                                  ;input: rax - number to display
    27                                  ;		r11 - mask
    28                                  ;		cl - number of bites to shr(power of 2)
    29                                  ;destr: 	rax, r10, rdx, rdi, rsi
    30                                  ;---------------------------------------------------------
    31                                  
    32                                  to2x:	
    33                                  
    34 00000000 4831D2                  		xor rdx, rdx
    35                                  .lp:	
    36 00000003 4989C2                  		mov r10, rax
    37 00000006 4C21D8                  		and rax, r11 		;mask
    38 00000009 4883C201                		add rdx, 1
    39 0000000D 8A80[00000000]          		mov al, [numberCode + rax]
    40 00000013 50                      	    push rax
    41 00000014 4C89D0                  		mov rax, r10
    42 00000017 48D3E8                  		shr rax, cl
    43 0000001A 4883F800                		cmp rax, 0
    44 0000001E 75E3                    		jne .lp
    45                                  
    46                                  		PUTSTRINGFROMSTACK
    46 00000020 90                  <1> nop
    46                              <1> 
    46 00000021 48C1E203            <1>  shl rdx, 3
    46 00000025 B801000000          <1>  mov rax, 0x01
    46 0000002A BF01000000          <1>  mov rdi, 1
    46 0000002F 4889E6              <1>  mov rsi, rsp
    46 00000032 0F05                <1>  syscall
    46 00000034 4801D4              <1>  add rsp, rdx
    46                              <1> 
    46 00000037 90                  <1> nop
    47                                  
    48 00000038 C3                      		ret
    49                                  
    50                                  ;---------------------------------------------------------
    51                                  
    52                                  ;---------------------------------------------------------
    53                                  ;display binary numbers
    54                                  ;input: rax - number to display
    55                                  ;destr: rax, r10, rdx, rdi, rsi, rcx, r11
    56                                  ;---------------------------------------------------------
    57                                  
    58                                  tobin:
    59                                  
    60 00000039 41BB01000000            		mov r11, 0x01
    61 0000003F B101                    		mov cl, 1
    62 00000041 E8BAFFFFFF              		call to2x
    63 00000046 C3                      		ret
    64                                  
    65                                  ;---------------------------------------------------------
    66                                  
    67                                  ;---------------------------------------------------------
    68                                  ;display oct numbers
    69                                  ;input: rax - number to display
    70                                  ;destr: rax, r10, rdx, rdi, rsi, rcx, r11
    71                                  ;---------------------------------------------------------
    72                                  
    73                                  tooct:
    74                                  
    75 00000047 41BB07000000            		mov r11, 0x07
    76 0000004D B103                    		mov cl, 3
    77 0000004F E8ACFFFFFF              		call to2x
    78 00000054 C3                      		ret
    79                                  
    80                                  ;---------------------------------------------------------
    81                                  
    82                                  ;---------------------------------------------------------
    83                                  ;display hexidecimal numbers
    84                                  ;input: rax - number to display
    85                                  ;destr: rax, r10, rdx, rdi, rsi, rcx, r11
    86                                  ;---------------------------------------------------------
    87                                  
    88                                  
    89                                  tohex:
    90                                  
    91 00000055 41BB0F000000            		mov r11, 0x0f
    92 0000005B B104                    		mov cl, 4
    93 0000005D E89EFFFFFF              		call to2x
    94 00000062 C3                      		ret
    95                                  
    96                                  ;---------------------------------------------------------
    97                                  
    98                                  ;---------------------------------------------------------
    99                                  ;display decimal numbers
   100                                  ;input: rax - number to display
   101                                  ;destr: rax, r10, rdx, rdi, rsi, rcx
   102                                  ;---------------------------------------------------------
   103                                  
   104                                  todec:
   105 00000063 B901000000              		mov rcx, 1
   106 00000068 4883F800                		cmp rax, 0
   107 0000006C 7909                    		jns	.lp
   108 0000006E 48F7D8                  		neg rax
   109 00000071 41BA2D000000            		mov r10, '-'
   110                                  
   111 00000077 4831D2                  .lp:	xor rdx, rdx
   112 0000007A BB0A000000              		mov ebx, 10
   113 0000007F F7F3                    		div ebx
   114 00000081 8A92[00000000]          		mov dl, [numberCode + rdx]
   115 00000087 52                      		push rdx
   116 00000088 48FFC1                  		inc rcx
   117 0000008B 4883F800                		cmp rax, 0
   118 0000008F 75E6                    		jne .lp
   119                                  
   120 00000091 4152                    		push r10
   121 00000093 4889CA                  		mov rdx, rcx
   122                                  		PUTSTRINGFROMSTACK
   122 00000096 90                  <1> nop
   122                              <1> 
   122 00000097 48C1E203            <1>  shl rdx, 3
   122 0000009B B801000000          <1>  mov rax, 0x01
   122 000000A0 BF01000000          <1>  mov rdi, 1
   122 000000A5 4889E6              <1>  mov rsi, rsp
   122 000000A8 0F05                <1>  syscall
   122 000000AA 4801D4              <1>  add rsp, rdx
   122                              <1> 
   122 000000AD 90                  <1> nop
   123                                  
   124 000000AE C3                      		ret
   125                                  
   126                                  ;---------------------------------------------------------
   127                                  
   128                                  ;---------------------------------------------------------
   129                                  ;display char 
   130                                  ;input: rax - char to display
   131                                  ;destr: rax, rdx, rdi, rsi
   132                                  ;---------------------------------------------------------
   133                                  
   134                                  printchar:
   135 000000AF BA01000000              	mov rdx, 1
   136 000000B4 50                      	push rax
   137                                  	PUTSTRINGFROMSTACK
   137 000000B5 90                  <1> nop
   137                              <1> 
   137 000000B6 48C1E203            <1>  shl rdx, 3
   137 000000BA B801000000          <1>  mov rax, 0x01
   137 000000BF BF01000000          <1>  mov rdi, 1
   137 000000C4 4889E6              <1>  mov rsi, rsp
   137 000000C7 0F05                <1>  syscall
   137 000000C9 4801D4              <1>  add rsp, rdx
   137                              <1> 
   137 000000CC 90                  <1> nop
   138 000000CD C3                      	ret
   139                                  ;---------------------------------------------------------
   140                                  
   141                                  ;---------------------------------------------------------
   142                                  ;display string
   143                                  ;input: rsi - pointer to string
   144                                  ;destr: rax, rdx, rdi, rsi
   145                                  ;---------------------------------------------------------
   146                                  
   147                                  printstr:
   148 000000CE 4831D2                  		xor rdx, rdx				;strlen
   149                                  .lp:	
   150 000000D1 48FFC2                  		inc rdx
   151 000000D4 803C1600                		cmp byte [rsi + rdx], 0  
   152 000000D8 75F7                    		jne .lp
   153                                  	
   154 000000DA B801000000              		mov rax, 0x01
   155 000000DF BF01000000              		mov rdi, 1         ; stdout
   156 000000E4 0F05                    		syscall
   157 000000E6 C3                      		ret
   158                                  
   159                                  ;---------------------------------------------------------
   160                                  
   161                                  ;---------------------------------------------------------
   162                                  ;printf function
   163                                  ;input: arguments in the steck from right to left and on the top of the stack pointer to format string
   164                                  ;destr: rax, rdx, rdi, rsi, r15 , r8
   165                                  ;---------------------------------------------------------
   166                                  printf:
   167 000000E7 415F                    		pop r15	;return adress
   168                                  
   169 000000E9 4158                    		pop r8
   170                                  .loop:	
   171 000000EB 41803825                				cmp byte [r8], '%'
   172 000000EF 740D                    		je .machine
   173                                  
   174 000000F1 418A00                  		mov byte al, [r8]
   175 000000F4 E8B6FFFFFF              		call printchar
   176                                  
   177 000000F9 E9CA000000              		jmp .endmach
   178                                  	
   179                                  .machine:
   180 000000FE 49FFC0                  	inc r8
   181 00000101 41803825                	cmp byte [r8], '%'
   182 00000105 0F8483000000            	je .proc
   183                                  
   184 0000010B 41803862                	cmp byte [r8], 98
   185 0000010F 0F82B3000000            	jb .endmach
   186                                  
   187 00000115 41803878                	cmp byte [r8], 120
   188 00000119 0F8FA9000000            	jg .endmach
   189                                  
   190 0000011F 6631C0                  	xor ax,ax
   191 00000122 418A00                  	mov al, byte [r8]
   192 00000125 4883E863                	sub rax, 98		
   193 00000129 8B0485[32010000]        	mov eax, dword [rax * 4 + .jumptable]
   194 00000130 FFE0                    	jmp rax
   195                                  
   196                                  	.jumptable:	
   197                                  
   198 00000132 [9A010000]              dd	.bin
   199 00000136 [C2010000]              dd	.char
   200 0000013A [B2010000]              dd	.dec
   201 0000013E [D0010000]              dd	.endfunc
   202 00000142 [D0010000]              dd	.endfunc
   203 00000146 [D0010000]              dd	.endfunc
   204 0000014A [D0010000]              dd	.endfunc
   205 0000014E [D0010000]              dd	.endfunc
   206 00000152 [D0010000]              dd	.endfunc
   207 00000156 [D0010000]              dd	.endfunc
   208 0000015A [D0010000]              dd	.endfunc
   209 0000015E [D0010000]              dd	.endfunc
   210 00000162 [D0010000]              dd	.endfunc
   211 00000166 [A2010000]              dd	.oct
   212 0000016A [D0010000]              dd	.endfunc
   213 0000016E [D0010000]              dd	.endfunc
   214 00000172 [D0010000]              dd	.endfunc
   215 00000176 [BA010000]              dd	.str
   216 0000017A [D0010000]              dd	.endfunc
   217 0000017E [D0010000]              dd	.endfunc
   218 00000182 [D0010000]              dd	.endfunc
   219 00000186 [D0010000]              dd	.endfunc
   220 0000018A [AA010000]              dd	.hex
   221                                  
   222                                  .proc:
   223 0000018E B825000000              		mov rax, '%'
   224 00000193 E817FFFFFF              		call printchar
   225 00000198 EB2E                    		jmp .endmach
   226                                  
   227                                  .bin:
   228 0000019A 58                      		pop rax
   229 0000019B E899FEFFFF              		call tobin
   230 000001A0 EB26                    		jmp .endmach
   231                                  
   232                                  .oct:
   233 000001A2 58                      		pop rax
   234 000001A3 E89FFEFFFF              		call tooct
   235 000001A8 EB1E                    		jmp .endmach
   236                                  
   237                                  .hex:
   238 000001AA 58                      		pop rax
   239 000001AB E8A5FEFFFF              		call tohex
   240 000001B0 EB16                    		jmp .endmach
   241                                  
   242                                  .dec:
   243 000001B2 58                      		pop rax
   244 000001B3 E8ABFEFFFF              		call todec
   245 000001B8 EB0E                    		jmp .endmach
   246                                  
   247                                  .str:
   248 000001BA 5E                      		pop rsi
   249 000001BB E80EFFFFFF              		call printstr
   250 000001C0 EB06                    		jmp .endmach
   251                                  
   252                                  .char:
   253 000001C2 58                      		pop rax
   254 000001C3 E8E7FEFFFF              		call printchar
   255                                  
   256                                  
   257 000001C8 49FFC0                  .endmach:	inc r8
   258 000001CB E91BFFFFFF              			jmp .loop
   259                                  
   260 000001D0 4157                    .endfunc:	push r15
   261 000001D2 C3                      			ret
   262                                  
   263                                  ;---------------------------------------------------------
   264                                  _start:   		
   265 000001D3 6A7F                    	push 127
   266 000001D5 6A21                    	push '!'
   267 000001D7 6A64                    	push 100
   268 000001D9 68DA0E0000              	push 3802
   269 000001DE 68[49000000]            	push Firstarg
   270 000001E3 6814050000              	push 1300d
   271 000001E8 68E4000000              	push 228d
   272                                  
   273 000001ED 68DA0E0000              	push 0edah
   274 000001F2 68[49000000]            	push Firstarg
   275 000001F7 6A04                    	push 100b
   276 000001F9 6A49                    	push 'I'
   277 000001FB 68[10000000]            	push Teststring
   278                                  	
   279 00000200 E8E2FEFFFF              	call printf
   280 00000205 B83C000000                  mov rax, 0x3C      ; exit64 (rdi)
   281 0000020A 4831FF                      xor rdi, rdi
   282 0000020D 0F05                        syscall
   283                                  ;------------------------------------------------------------
   284                                  
   285                                  section .data
   286 00000000 303132333435363738-     numberCode: db "0123456789ABCDEF"
   286 00000009 39414243444546     
   287                                  
   288 00000010 2563206162736F6C75-     Teststring: db '%c absolutely, %b%%, %s %x! %d, %o', 10,'and I %s %x %d%%%c%b', 10, 0
   288 00000019 74656C792C20256225-
   288 00000022 252C20257320257821-
   288 0000002B 2025642C20256F0A61-
   288 00000034 6E6420492025732025-
   288 0000003D 782025642525256325-
   288 00000046 620A00             
   289 00000049 4C6F766500              Firstarg: db "Love", 0
   290                                  ;Second arg: db ""
   291                                  ;------------------------------------------------------------------------------------------
